#!/usr/bin/env bash
#20240214_1917_est_EJR
# American Roulette Predcition Calc Based On Trend Alternatives

#=== Variables ===========================================================
prefall=4
Options=(0 00 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36)
Red=(1 3 5 7 9 12 14 16 18 19 21 23 25 27 30 32 34 36)
Blk=(2 4 6 8 10 11 13 15 17 20 22 24 26 28 29 31 33 35)
Even=(2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34)
Odd=(1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35)
Lo=(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18)
Hi=(19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36)
Col1=(1 4 7 10 13 16 19 22 25 28 31 34)
Col2=(2 5 8 11 14 17 20 23 26 29 32 35)
Col3=(3 6 9 12 15 18 21 24 27 30 33 36)
Doz1=(1 2 3 4 5 6 7 8 9 10 11 12)
Doz2=(13 14 15 16 17 18 19 20 21 22 23 24)
Doz3=(25 26 27 28 29 30 31 32 33 34 35 36)

declare -a outcomes  # Array to store past winners

#=== Functions ===========================================================
inlist() { local last_number=$1; local list=("${!2}"); for item in "${list[@]}"; do [[ $item == $last_number ]] && return 0; done; return 1; }

predict_outcome() {

#--VARS
local last_number=$1
local red_black; local red_count=0; local black_count=0
local even_odd; local even_count=0; local odd_count=0
local high_low; local high_count=0; local low_count=0
local col123; local col1_count=0; local col2_count=0; local col3_count=0
local doz123; local dozn1_count=0; local dozn2_count=0; local dozn3_count=0
local z_count=0; local zz_count=0

local unused_numbersCol3="00 3 6 9 12 15 18 21 24 27 30 33 36"
local unused_numbersCol2="   2 5 8 11 14 17 20 23 26 29 32 35"
local unused_numbersCol1="0  1 4 7 10 13 16 19 22 25 28 21 34"


#--COUNTS------------------------------------------------------------
for outcome in "${outcomes[@]}"; do
  #un-used
  unused_numbersCol3=$(echo "$unused_numbersCol3" | sed "s/\<$outcome\>/$(printf '%*s' "${#outcome}")/")
  unused_numbersCol2=$(echo "$unused_numbersCol2" | sed "s/\<$outcome\>/$(printf '%*s' "${#outcome}")/")
  unused_numbersCol1=$(echo "$unused_numbersCol1" | sed "s/\<$outcome\>/$(printf '%*s' "${#outcome}")/")

  # 0 and 00
  if [[ $outcome == "0" ]]; then z_count=$((z_count+1)); continue
  elif [[ $outcome == "00" ]]; then zz_count=$((zz_count+1)); continue
  fi
  #red/black
  if inlist "$outcome" Red[@]; then red_count=$((red_count+1)); elif inlist "$outcome" Blk[@]; then black_count=$((black_count+1)); fi
  #Even/Odd
  if inlist "$outcome" Even[@]; then even_count=$((even_count+1)); elif inlist "$outcome" Odd[@]; then odd_count=$((odd_count+1)); fi
  #Lo/Hi
  if inlist "$outcome" Lo[@]; then low_count=$((low_count+1)); elif inlist "$outcome" Hi[@]; then high_count=$((high_count+1)); fi
  #columns
  if inlist "$outcome" Col1[@]; then col1_count=$((col1_count+1)); elif inlist "$outcome" Col2[@]; then col2_count=$((col2_count+1)); elif inlist "$outcome" Col3[@]; then col3_count=$((col3_count+1)); fi
  #dozens
  if inlist "$outcome" Doz1[@]; then dozn1_count=$((dozn1_count+1)); elif inlist "$outcome" Doz2[@]; then dozn2_count=$((dozn2_count+1)); elif inlist "$outcome" Doz3[@]; then dozn3_count=$((dozn3_count+1)); fi
done

#--Predictions-------------------------------------------------------
# Calculate trends for red/black
if (( (red_count - black_count) >= ${prefall} )); then
    red_black="Blk"
elif (( (black_count - red_count) >= ${prefall} )); then
    red_black="Red"
else
    red_black=""
fi
# Calculate trends for odd/even
if (( (odd_count - even_count) >= ${prefall} )); then
    even_odd="Even"
elif (( (even_count - odd_count) >= ${prefall} )); then
    even_odd="Odd"
else
    even_odd=""
fi
# Calculate trends for high/low
if (( (high_count - low_count) >= ${prefall} )); then
    high_low="Lo"
elif (( (low_count - high_count) >= ${prefall} )); then
    high_low="Hi"
else
    high_low=""
fi
# Calculate trends for dozens
if (( (dozn2_count - dozn1_count) >= ${prefall} && (dozn3_count - dozn1_count) >= ${prefall} )); then
    doz123="Doz1"
elif (( (dozn1_count - dozn2_count) >= ${prefall} && (dozn3_count - dozn2_count) >= ${prefall} )); then
    doz123="Doz2"
elif (( (dozn1_count - dozn3_count) >= ${prefall} && (dozn2_count - dozn3_count) >= ${prefall} )); then
    doz123="Doz3"
else
    doz123=""
fi
# Calculate trends for columns
if (( (col2_count - col1_count) >= ${prefall} && (col3_count - col1_count) >= ${prefall} )); then
    col123="Col1"
elif (( (col1_count - col2_count) >= ${prefall} && (col3_count - col2_count) >= ${prefall} )); then
    col123="Col2"
elif (( (col1_count - col3_count) >= ${prefall} && (col2_count - col3_count) >= ${prefall} )); then
    col123="Col3"
else
    col123=""
fi

#--Output predictions------------------------------------------------
preout="$red_black $even_odd $high_low $doz123 $col123"; preout=$(echo "$preout" | tr -s ' ')
clear
  echo -e "
================ Past Numbers =============================
${outcomes[@]}
================ UnUsed Numbers ===========================
${unused_numbersCol3[@]}
${unused_numbersCol2[@]}
${unused_numbersCol1[@]}
================ Historic Data ============================
Reds:   $red_count\t| Evens: $even_count\t| Lo:     $low_count\t| Col 3: $col3_count
Blacks: $black_count\t| Odds:  $odd_count\t| Hi:     $high_count\t| Col 2: $col2_count
Doz 1:  $dozn1_count\t| Doz 2: $dozn2_count\t| Doz 3:  $dozn3_count\t| Col 1: $col1_count
0:      $z_count\t| 00:    $zz_count\t
================== Predictions ============================
$preout"
}

#== Main function to keep prompting for outcomes and showing predictions ==========================
main() {
  while true; do
    read -p "Enter the next outcome (00, 0, 1-36): " next_outcome
    if ! [[ "$next_outcome" =~ ^(0|00|[1-9]|[1-2][0-9]|3[0-6])$ ]]; then echo "Please enter a valid number between 0 and 36, '0', or '00'."; continue; fi
    outcomes+=("$next_outcome")
    if [[ ${#outcomes[@]} -ge 3 ]]; then predict_outcome ${outcomes[-1]}; fi
  done
}
# Usage: main
clear
main
