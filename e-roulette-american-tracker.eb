#!/usr/bin/env bash
#20240213_1335_est_EJR
# American Roulette Predcition Calc Based On Trend Alternatives

#==== stuff to fix or add ===========================================
# add ouput for numbers that have not come up yet 0 00 1-36

#=== funcs ====
is_odd() { local number=$1; if (( number % 2 == 1 )); then return 0; else return 1; fi; }
is_high() { local number=$1; if (( number >= 19 )); then return 0; else return 1; fi; }
get_color() { local number=$1; if [[ $number -eq 0 || $number -eq 00 ]]; then echo "Green"; elif [[ $number -eq 1 || $number -eq 3 || $number -eq 5 || $number -eq 7 || $number -eq 9 || $number -eq 12 || $number -eq 14 || $number -eq 16 || $number -eq 18 || $number -eq 19 || $number -eq 21 || $number -eq 23 || $number -eq 25 || $number -eq 27 || $number -eq 30 || $number -eq 32 || $number -eq 34 || $number -eq 36 ]]; then echo "Red"; else echo "Black"; fi; }
predict_outcome() {
  #--VARS
  local last_number=$1; local red_black; local even_odd; local high_low; local dozn1_count=0; local dozn2_count=0; local dozn3_count=0; local col1_count=0; local col2_count=0; local col3_count=0; local red_count=0; local black_count=0; local even_count=0; local odd_count=0; local high_count=0; local low_count=0
  local z_count=0; local zz_count=0
  local unused_numbers="0 00 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36"
  #--COUNTS
  for outcome in "${outcomes[@]}"; do
    # 0 and 00 & UnUsed Numbers
    if [[ $outcome == "0" ]]; then
      z_count=$((z_count+1))
      unused_numbers=${unused_numbers/0/}
      continue
    elif [[ $outcome == "00" ]]; then
      zz_count=$((zz_count+1))
      unused_numbers=${unused_numbers/00/}
      continue
    fi
    unused_numbers=${unused_numbers/ $outcome/}
    #red/black
    if [[ $(get_color $outcome) == "Red" ]]; then red_count=$((red_count+1))
      else black_count=$((black_count+1))
    fi
    #odd/even
    if is_odd $outcome; then odd_count=$((odd_count+1))
      else even_count=$((even_count+1))
    fi
    #high/low
    if is_high $outcome; then high_count=$((high_count+1))
      else low_count=$((low_count+1))
    fi
    #dozens
    if (( outcome >= 1 && outcome <= 12 )); then dozn1_count=$((dozn1_count+1))
      elif (( outcome >= 13 && outcome <= 24 )); then dozn2_count=$((dozn2_count+1))
      elif (( outcome >= 25 && outcome <= 36 )); then dozn3_count=$((dozn3_count+1))
    fi
    #columns
    if (( outcome % 3 == 0 )); then col3_count=$((col3_count+1))
      elif (( (outcome - 1) % 3 == 0 )); then col1_count=$((col1_count+1))
      else col2_count=$((col2_count+1))
    fi

  done

  #--TRENDS
  # Calculate trends for red/black
  if (( red_count < black_count )); then red_black="Red"
    elif (( black_count < red_count )); then red_black="Black"
    else red_black="Red or Black"
  fi
  # Calculate trends for odd/even
  if (( odd_count < even_count )); then even_odd="Even"
    elif (( even_count < odd_count )); then even_odd="Odd"
    else even_odd="Even or Odd"
  fi
  # Calculate trends for high/low
  if (( high_count < low_count )); then high_low="High"
    elif (( low_count < high_count )); then high_low="Low"
    else high_low="High or Low"
  fi
  #doz
  if (( dozn1_count < dozn2_count && dozn1_count < dozn3_count )); then dozn_prediction="Doz 1-12"
    elif (( dozn2_count < dozn1_count && dozn2_count < dozn3_count )); then dozn_prediction="Doz 13-24"
    elif (( dozn3_count < dozn1_count && dozn3_count < dozn2_count )); then dozn_prediction="Doz 25-36"
    else dozn_prediction="Doz 1-12, Doz 13-24, or Doz 25-36"
  fi
  #col
  if (( col1_count < col2_count && col1_count < col3_count )); then col_prediction="Col1"
    elif (( col2_count < col1_count && col2_count < col3_count )); then col_prediction="Col2"
    elif (( col3_count < col1_count && col3_count < col2_count )); then col_prediction="Col3"
    else col_prediction="Col1, Col2, or Col3"
  fi

  # Output predictions
  clear
  echo -e "
================ Past Numbers =============================
${outcomes[@]}
================ UnUsed Numbers ===========================
${unused_numbers[@]}
================ Historic Data ============================
Reds:   $red_count\t| Evens: $even_count\t| Lo:     $low_count\t| Col 3: $col3_count
Blacks: $black_count\t| Odds:  $odd_count\t| Hi:     $high_count\t| Col 2: $col2_count
Doz 1:  $dozn1_count\t| Doz 2: $dozn2_count\t| Doz 3:  $dozn3_count\t| Col 1: $col1_count
0:      $z_count\t| 00:    $zz_count\t
================== Predictions ============================
$red_black
$even_odd
$high_low
$dozn_prediction
$col_prediction"
}

# Main function to keep prompting for outcomes and showing predictions
main() {
  declare -a outcomes
  while true; do
    read -p "Enter the next outcome (0-36): " next_outcome
    if ! [[ "$next_outcome" =~ ^(0|00|[1-9]|[1-2][0-9]|3[0-6])$ ]]; then echo "Please enter a valid number between 0 and 36, '0', or '00'."; continue; fi
    outcomes+=("$next_outcome")
    if [[ ${#outcomes[@]} -ge 3 ]]; then predict_outcome ${outcomes[-1]}; fi
  done
}

# Usage: main
clear
main
